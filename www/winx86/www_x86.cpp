//
//	Generated by ChatGPT 2025.jan.
//
//	For MS Visual Studio 2022
//
//
#include <winsock2.h>
#include <ws2tcpip.h>
#include <windows.h>
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <unordered_map>
#include <vector>
#include <memory>
#include <thread>


#define WIN32_LEAN_AND_MEAN

#pragma warning(disable : 4996)

#pragma comment(lib, "ws2_32.lib")

#define BUFFER_SIZE 1024

std::unordered_map<std::string, std::string> mime_types;
std::string default_encoding = "UTF-8";
int server_port = 8080;

void load_mime_types() {
    std::ifstream mime_file("mimes.ini");
    if (mime_file.is_open()) {
        std::string line;
        while (std::getline(mime_file, line)) {
            std::istringstream stream(line);
            std::string extension, type;
            if (stream >> extension >> type) {
                mime_types[extension] = type;
            }
        }
    }
}

void load_configurations() {
    std::ifstream config_file("www.ini");
    if (config_file.is_open()) {
        std::string line;
        while (std::getline(config_file, line)) {
            std::istringstream stream(line);
            std::string key, value;
            if (std::getline(stream, key, '=') && std::getline(stream, value)) {
                if (key == "port") {
                    server_port = std::stoi(value);
                }
                else if (key == "encoding") {
                    default_encoding = value;
                }
            }
        }
    }
}

std::string get_mime_type(const std::string& file_path) {
    size_t pos = file_path.find_last_of('.');
    if (pos == std::string::npos) {
        return "application/octet-stream";
    }

    std::string extension = file_path.substr(pos);
    auto it = mime_types.find(extension);
    if (it != mime_types.end()) {
        return it->second;
    }

    return "application/octet-stream";
}

std::string get_server_ip() {
    char hostname[256];
    if (gethostname(hostname, sizeof(hostname)) == SOCKET_ERROR) {
        return "127.0.0.1";
    }

    addrinfo hints = {}, * res;
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

    if (getaddrinfo(hostname, nullptr, &hints, &res) != 0) {
        return "127.0.0.1";
    }

    sockaddr_in* addr = reinterpret_cast<sockaddr_in*>(res->ai_addr);
    std::string ip = inet_ntoa(addr->sin_addr);
    freeaddrinfo(res);
    return ip;
}

void serve_file(SOCKET client_socket, const std::string& path) {
    std::ifstream file(path, std::ios::binary);
    if (!file.is_open()) {
        std::string response = "HTTP/1.1 404 Not Found\r\nContent-Length: 0\r\n\r\n";
        send(client_socket, response.c_str(), response.size(), 0);
        return;
    }

    file.seekg(0, std::ios::end);
    size_t file_size = file.tellg();
    file.seekg(0, std::ios::beg);

    std::string mime_type = get_mime_type(path);
    std::ostringstream header;
    header << "HTTP/1.1 200 OK\r\nContent-Type: " << mime_type << "; charset=" << default_encoding
        << "\r\nContent-Length: " << file_size << "\r\n\r\n";

    std::string header_str = header.str();
    send(client_socket, header_str.c_str(), header_str.size(), 0);

    char buffer[BUFFER_SIZE];
    while (file.read(buffer, sizeof(buffer))) {
        send(client_socket, buffer, sizeof(buffer), 0);
    }
    send(client_socket, buffer, file.gcount(), 0);

    std::cout << "Served file: " << path << " (" << file_size << " bytes)\n";
}

void handle_client(SOCKET client_socket) {
    char buffer[BUFFER_SIZE];
    int bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0);

    if (bytes_received <= 0) {
        closesocket(client_socket);
        return;
    }

    buffer[bytes_received] = '\0';
    std::istringstream request(buffer);

    std::string method, path;
    request >> method >> path;

    if (method == "GET" || method == "POST") {
        size_t query_pos = path.find('?');
        if (query_pos != std::string::npos) {
            path = path.substr(0, query_pos);
        }

        if (path == "/") {
            path = "./index.html";
        }
        else {
            path = path.substr(1);
        }

        serve_file(client_socket, path);
    }
    else {
        std::string response = "HTTP/1.1 501 Not Implemented\r\nContent-Length: 0\r\n\r\n";
        send(client_socket, response.c_str(), response.size(), 0);
    }

    closesocket(client_socket);
}

int main() {
    load_configurations();
    load_mime_types();

    WSADATA wsa_data;
    if (WSAStartup(MAKEWORD(2, 2), &wsa_data) != 0) {
        std::cerr << "WSAStartup failed\n";
        return 1;
    }

    SOCKET server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == INVALID_SOCKET) {
        std::cerr << "Socket creation failed\n";
        WSACleanup();
        return 1;
    }

    sockaddr_in server_addr = {};
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(server_port);

    if (bind(server_socket, reinterpret_cast<sockaddr*>(&server_addr), sizeof(server_addr)) == SOCKET_ERROR) {
        std::cerr << "Bind failed\n";
        closesocket(server_socket);
        WSACleanup();
        return 1;
    }

    if (listen(server_socket, SOMAXCONN) == SOCKET_ERROR) {
        std::cerr << "Listen failed\n";
        closesocket(server_socket);
        WSACleanup();
        return 1;
    }

    std::string server_ip = get_server_ip();
    std::cout << "Server is running on http://" << server_ip << ":" << server_port << "\n";

    while (true) {
        sockaddr_in client_addr;
        int client_len = sizeof(client_addr);
        SOCKET client_socket = accept(server_socket, reinterpret_cast<sockaddr*>(&client_addr), &client_len);

        if (client_socket == INVALID_SOCKET) {
            std::cerr << "Accept failed\n";
            break;
        }

        std::thread(handle_client, client_socket).detach();
    }

    closesocket(server_socket);
    WSACleanup();

    return 0;
}